<?php

/*
 * This file is part of Contao.
 *
 * Copyright (c) 2005-2015 Leo Feyer
 *
 * @license LGPL-3.0+
 */

namespace Contao\Image;

use Imagine\Image\BoxInterface;
use Imagine\Image\PointInterface;
use Imagine\Image\Point;

/**
 * Resize coordinates generated by the ResizeCalculator.
 *
 * @author Martin AuswÃ¶ger <martin@auswoeger.com>
 */
class ResizeCoordinates
{
    /**
     * @var BoxInterface
     */
    private $size;

    /**
     * @var PointInterface
     */
    private $cropStart;

    /**
     * @var BoxInterface
     */
    private $cropSize;

    /**
     * Constructor.
     *
     * @param BoxInterface   $size      The target size
     * @param PointInterface $cropStart The crop start coordinate
     * @param BoxInterface   $cropSize  The crop size
     */
    public function __construct(
        BoxInterface $size,
        PointInterface $cropStart,
        BoxInterface $cropSize
    ) {
        $this->size = $size;
        $this->cropStart = $cropStart;
        $this->cropSize = $cropSize;
    }

    /**
     * Gets the size.
     *
     * @return BoxInterface
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Gets the crop start coordinate.
     *
     * @return PointInterface
     */
    public function getCropStart()
    {
        return $this->cropStart;
    }

    /**
     * Gets the crop size.
     *
     * @return BoxInterface
     */
    public function getCropSize()
    {
        return $this->cropSize;
    }

    /**
     * Gets a hash of the coordinates.
     *
     * @return string
     */
    public function getHash()
    {
        return md5(implode(',', [
            (int) $this->size->getWidth(),
            (int) $this->size->getHeight(),
            (int) $this->cropStart->getX(),
            (int) $this->cropStart->getY(),
            (int) $this->cropSize->getWidth(),
            (int) $this->cropSize->getHeight(),
        ]));
    }

    /**
     * Compares the coordinates with another ResizeCoordinates or Box object.
     *
     * @param self|BoxInterface $coordinates The object to compare
     *
     * @return boolean
     */
    public function equals($coordinates)
    {
        if ($coordinates instanceof BoxInterface) {
            $coordinates = new self(
                $coordinates,
                new Point(0, 0),
                $coordinates
            );
        }

        if (!$coordinates instanceof self) {
            throw new \InvalidArgumentException(
                '$coordinates must be an instance of ResizeCoordinates or BoxInterface, "' .
                get_class($coordinates) .
                '" given'
            );
        }

        return
            $this->cropStart->getX() === $coordinates->getCropStart()->getX() &&
            $this->cropStart->getY() === $coordinates->getCropStart()->getY() &&
            $this->cropSize->getWidth() === $coordinates->getCropSize()->getWidth() &&
            $this->cropSize->getHeight() === $coordinates->getCropSize()->getHeight() &&
            $this->size->getWidth() === $coordinates->getSize()->getWidth() &&
            $this->size->getHeight() === $coordinates->getSize()->getHeight()
        ;
    }
}
